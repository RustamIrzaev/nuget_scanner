use std::fs::File;
use std::io::Write;
use colored::Colorize;
use crate::models::project_info::ProjectInfo;

pub fn generate_markdown_report(package_data: Vec<ProjectInfo>, save_folder_path: String) {
    let mut report = String::new();

    report.push_str("# NuGet Packages Report\n\n");

    for project in package_data {
        report.push_str(&format!("### Project {}\n", project.project_name));

        if project.packages.is_empty() {
            report.push_str("No packages found in this project\n");
            continue;
        }

        report.push_str("| Package Name | Version | Latest? | License | Description |\n");
        report.push_str("| --- | --- | --- | --- | --- |\n");

        for package in project.packages.iter() {
            if package.is_parsed_ok {
                let outdated = if package.is_outdated {
                    format!("ðŸ”¸ {}", package.latest_version)
                } else {
                    "âœ…".to_string()
                };

                report.push_str(&format!(
                    "| **[{}]({})** | {} | {} | [{}]({}) | {} |\n",
                    package.name,
                    package.project_url,
                    package.version,
                    outdated,
                    package.license_expression,
                    package.license_url,
                    package.description.replace("|", " ").replace("\n", " ")
                ));
            } else {
                report.push_str(&format!(
                    "| {} | {} | - | - | {} | \n",
                    package.name, package.version, "ðŸ›‘ error fetching details"
                ));
            }
        }
    }

    report.push_str("\n---\n");
    report
        .push_str("_Generated by [nuget-scanner](https://github.com/RustamIrzaev/nuget_scanner)_");

    let report_path = format!("{}/LICENSE_REPORT.md", save_folder_path.clone());
    let mut file = File::create(&report_path).expect("Unable to create file");
    file.write_all(report.as_bytes())
        .expect("Unable to write data");

    println!("\nReport generated: {}", report_path.bright_blue());
}